# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
# See file LICENSE for terms.

[build-system]
build-backend = "rapids_build_backend.build"
requires = [
    "rapids-build-backend>=0.3.0,<0.4.0.dev0",
    "scikit-build-core[pyproject]>=0.10.0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project]
name = "rapidsmp"
dynamic = ["version"]
description = "Multi-GPU and distributed-memory algorithms"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "NVIDIA Corporation" },
]
license = { text = "Apache 2.0" }
requires-python = ">=3.10"
dependencies = [
    "pylibcudf==25.2.*,>=0.0.0a0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.
classifiers = [
    "Intended Audience :: Developers",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[project.urls]
Homepage = "https://github.com/rapidsai/rapids-multi-gpu"

[tool.rapids-build-backend]
build-backend = "scikit_build_core.build"
dependencies-file = "../../dependencies.yaml"
matrix-entry = "cuda_suffixed=true"
requires = [
    "cmake>=3.26.4,!=3.30.0",
    "cython>=3.0.3",
    "ninja",
    "rapids-build-backend>=0.3.0,<0.4.0.dev0",
    "scikit-build-core[pyproject]>=0.10.0",
] # This list was generated by `rapids-dependency-file-generator`. To make changes, edit ../../dependencies.yaml and run `rapids-dependency-file-generator`.

[tool.scikit-build]
build-dir = "build/{wheel_tag}"
cmake.build-type = "Release"
cmake.version = "CMakeLists.txt"
minimum-version = "build-system.requires"
ninja.make-fallback = true
sdist.exclude = ["*tests*"]
sdist.reproducible = true
wheel.packages = ["rapidsmp"]
wheel.exclude = ["*.pyx", "CMakeLists.txt"]

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "rapidsmp/VERSION"
regex = "(?P<value>.*)"

[tool.mypy]
exclude = ["_deps/*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 80

[tool.ruff.lint]
select = [
    # pycodestyle Error
    "E",
    # Pyflakes
    "F",
    # pycodestyle Warning
    "W",
    # isort
    "I",
    # no-blank-line-before-function
    "D201",
    # one-blank-line-after-class
    "D204",
    # indent-with-spaces
    "D206",
    # under-indentation
    "D207",
    # over-indentation
    "D208",
    # new-line-after-last-paragraph
    "D209",
    # surrounding-whitespace
    "D210",
    # blank-line-before-class
    "D211",
    # section-not-over-indented
    "D214",
    # section-underline-not-over-indented
    "D215",
    # triple-single-quotes
    "D300",
    # escape-sequence-in-docstring
    "D301",
    # first-line-capitalized
    "D403",
    # capitalize-section-name
    "D405",
    # new-line-after-section-name
    "D406",
    # dashed-underline-after-section
    "D407",
    # section-underline-after-name
    "D408",
    # section-underline-matches-section-length
    "D409",
    # no-blank-line-after-section
    "D410",
    # no-blank-line-before-section
    "D411",
    # blank-lines-between-header-and-content
    "D412",
    # empty-docstring-section
    "D414",
    # overload-with-docstring
    "D418",
    # flake8-type-checking
    "TCH",
    # flake8-future-annotations
    "FA",
    # non-pep585-annotation
    "UP006",
    # non-pep604-annotation
    "UP007",
    # Import from `collections.abc` instead: `Callable`
    "UP035",
    # usage of legacy `np.random` function calls
    "NPY002",
]
ignore = [
    # whitespace before :
    "E203",
    # line-too-long (due to Copyright header)
    "E501",
]
fixable = ["ALL"]
