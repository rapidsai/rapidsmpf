# SPDX-FileCopyrightText: Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES.
# SPDX-License-Identifier: Apache-2.0

from __future__ import annotations

from typing import Generic, Protocol, TypeVar

from rapidsmpf.streaming.core.context import Context

PayloadT = TypeVar("PayloadT", bound=Payload)

class Payload(Protocol):
    @classmethod
    def from_message(cls: PayloadT, message: Message[PayloadT]) -> PayloadT: ...
    def into_message(self: PayloadT, message: Message[PayloadT]) -> None: ...

class Message(Generic[PayloadT]):
    def __init__(self, payload: PayloadT): ...
    def empty(self) -> bool: ...

class Channel(Message[PayloadT]):
    def __init__(self) -> None: ...
    async def drain(self, ctx: Context) -> None: ...
    async def shutdown(self, ctx: Context) -> None: ...
    async def send(self, ctx: Context, item: Message[PayloadT]) -> None: ...
    async def recv(self, ctx: Context) -> Message[PayloadT] | None: ...
